# Root logger option

# 1. 로그 출력 Level은 INFO부터 할것임.
# 2. rootLogger 에 사용할 로깅 Appender로 stdout이라는것과 
#    logfile이라는 것 두가지를 사용하겠다
#log4j.rootLogger=debug, stdout, logfile
#log4j.rootLogger=error, stdout		-> 화면에 출력
#log4j.rootLogger=error, logfile	-> 파일에 출력
log4j.rootLogger=info, stdout, logfile

# Direct log messages to stdout
# ConversionPattern은 로그가 어떠한 형식으로 출력될것인지 
# 그 포맷을 정의하는 것.
# %5p -> p : 변환문자
# %C{2} -> package(kr.or.ddit.basic.Log4jTest)에서 basic.Log4jTest만 출력
# %L -> 줄번호 출력해줌
# %m -> 출력해야하는 내용
# %n -> 줄바꿈
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p (%C{2}:%L) - %m%n

# Direct log message to log file
# logfile이라는 appender는 로그를 파일로 출력해주는 놈인데, 
# 파일path를 정의 할 수 있다.
# %d{yyyy-MM-dd HH:mm:ss} -> 표시할 날짜{형식}
# %M -> 메세지 출력하는 메소드 이름
log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.logfile.DatePattern='.'yyyy-MM-dd
log4j.appender.logfile.File=D:/application.log
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %5p (%C{2} - %M:%L) - %m%n
log4j.appender.logfile.Append=true

# Sql log
# 이곳이 java.sql.* 을 사용하는 쿼리를 보여주는 설정.
#log4j.logger.java.sql.Connection=DEBUG, logfile
#log4j.logger.java.sql.Statement=DEBUG, logfile
#log4j.logger.java.sql.PreparedStatement=DEBUG, logfile
#log4j.logger.java.sql.ResultSet=DEBUG, logfile
